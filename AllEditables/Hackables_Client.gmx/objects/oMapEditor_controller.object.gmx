<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tutorial
//alarm[0] = 1;

//show_debug_overlay(1);
//global.waitReply = 0;


TEST_col = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
global.colour_pick = 0;
line_width = 10;
mxprev = device_mouse_x_to_gui(0);
myprev = device_mouse_y_to_gui(0);
mxFrom = 0;
myFrom = 0;
//display_set_gui_size(room_width,room_height);
/*display_set_gui_maximise();
surface_resize(application_surface, display_get_gui_width(), display_get_gui_height()); 
view_wview = display_get_gui_width();
view_hview = display_get_gui_height();
view_wport = view_wview;
view_hport = view_hview;*/

qSend = 0;

me_overlaySurf = surface_create(room_width,room_width);
surface_set_target(me_overlaySurf);
draw_clear_alpha(0,0);
surface_reset_target();

me_surf = surface_create(room_width,room_width);
surface_set_target(me_surf);
draw_clear_alpha(irandom(c_white),1);
surface_reset_target();
me_buffBack = buffer_create(room_width*room_height*4,buffer_fixed,1);

me_colourSurf = surface_create(256,256);
surface_set_target(me_colourSurf);
draw_clear_alpha(0,1);
draw_rectangle_colour(0,0,256,256,c_white,c_white,c_black,c_black,0);
draw_background_stretched(tex_colour,0,0,256,256);
surface_reset_target();

window_colour = instance_create(0,0,oMapEditor_window_colour);
with(window_colour)
{
    w = 256;
    h = 256;
    event_user(0);
}

////TOOLS WINDOW\\\\
tool_w = 2;
tool_h = 6;
tool_cellSize = 64;
tool = ds_grid_create(tool_w,tool_h);
tool[# 0,0] = "pen";
tool[# 1,0] = "eraser";
tool[# 0,1] = "line";
tool[# 1,1] = "arrow";
tool[# 0,2] = "rectangle";
tool[# 1,2] = "roundrect";
tool[# 0,3] = "circle";
tool[# 1,3] = "undo";
tool[# 0,4] = "width";
tool[# 1,4] = "width"; //just a place holder for width tool
tool[# 0,5] = "send";
tool[# 1,5] = "clear";
tool_current = tool[# 0,0];

var k=0;
me_toolsSurf = surface_create(tool_w*tool_cellSize,tool_h*tool_cellSize);
surface_set_target(me_toolsSurf);
draw_clear_alpha(0,0);
for(var i=0; i&lt;tool_h; i++) for(var j=0; j&lt;tool_w; j++){
    draw_sprite_stretched(sTools,k, j*tool_cellSize, i*tool_cellSize,tool_cellSize,tool_cellSize);
    draw_set_color(c_ltgray);
    draw_rectangle(j*tool_cellSize, i*tool_cellSize,j*tool_cellSize+tool_cellSize, i*tool_cellSize+tool_cellSize,1);
    draw_set_colour(0);
    k++;
}
draw_sprite(sTools_width,0,0, (i-2)*tool_cellSize);
surface_reset_target();

window_tools = instance_create(view_wview-tool_w*tool_cellSize,0,oMapEditor_window_tools);
with(window_tools)
{
    w = other.tool_w*other.tool_cellSize;
    h = other.tool_h*other.tool_cellSize + other.tool_cellSize;
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tutorial
show_message_async("ברוכים הבאים לעורך המפות!#ליציאה לחצו על#ESC");
show_message_async("למחיקת המפה וצביעת הרקע, בחרו צבע מבורר הצבעים ולחצו על [ר] במקלדת");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean the overlay
surface_set_target(me_overlaySurf);
draw_clear_alpha(0,0);
//draw_background_stretched(tex_colour,0,0,room_width,room_height);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(device_mouse_check_button_pressed(0,mb_left)) buffer_get_surface(me_buffBack,me_surf,0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing
if(global.waitReply) exit;

//Color picker
mx = device_mouse_x_to_gui(0);
my = device_mouse_y_to_gui(0);
ww = window_colour.w-window_colour.x;
wh = window_colour.h-window_colour.y;
xx = 0;yy = 0;

if( point_in_rectangle(mx,my,window_colour.x,window_colour.y,window_colour.x+window_colour.w,window_colour.y+window_colour.h+window_colour.window_top) )
{
    if(mouse_check_button(mb_left) &amp;&amp; my&gt;window_colour.y+window_colour.window_top)
    {
        draw_set_blend_mode(bm_normal);
        scw = floor((mx-window_colour.x)*256/window_colour.w);
        sch = floor((my-window_colour.y-window_colour.window_top)*256/window_colour.h);
        global.colour_pick = surface_getpixel(me_colourSurf,scw,sch);
    }
}
else if( point_in_rectangle(mx,my,window_tools.x,window_tools.y,window_tools.x+window_tools.w,window_tools.y+window_tools.h+window_tools.window_top) )
{
    mxw = median(0, mx-window_tools.x, window_tools.w);
    myh = median(0, my-window_tools.y-window_tools.window_top, window_tools.h);
    xx = floor(mxw*tool_w/window_tools.w);
    yy = floor(myh*tool_h/(window_tools.h-window_tools.window_top));
    if(mouse_check_button_pressed(mb_left) &amp;&amp; my &gt; window_tools.y+window_tools.window_top)
    { //get the tool id
        for(var i=0; i&lt;tool_h; i++) for(var j=0; j&lt;tool_w; j++){
            if(xx==j &amp;&amp; yy==i){
                tool_previous = tool_current;
                tool_current = tool[# j,i];
                if(tool_current=="width") event_user(0); //bug fix
                break;
            }
        }
    }
}
else //use current tool
{
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse vars
mxprev = mx;
myprev = my;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d,stat;
i_d = async_load[? "id"];

switch(i_d){
case qSend: //send map
    if ds_map_find_value(async_load, "status"){
        buffer_seek(wbuff,0,0);
        buffer_write(wbuff,buffer_u8,Sock.UPLOAD_MAP);
        buffer_write(wbuff, buffer_u16, global.map_x_edit);
        buffer_write(wbuff, buffer_u16, global.map_y_edit);
        
        var tbuff = buffer_create(1024*768*4,buffer_fixed,4);
        buffer_get_surface(tbuff,oMapEditor_controller.me_surf,0,0,0);
        buffer_copy(tbuff,0,buffer_get_size(tbuff),wbuff,buffer_tell(wbuff));
        
        buffer_delete(tbuff);
        network_send_packet(server,wbuff,buffer_get_size(wbuff));
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tools
if(global.waitReply) exit;

switch(tool_current){
case ("pen"): //pen
    surface_set_target(me_surf);
    draw_set_alpha(1);
    if(mouse_check_button(mb_left))
    {
        //draw_line_width_colour(mxprev,myprev,mx,my,line_width,global.colour_pick,global.colour_pick);
        draw_circle_colour(mx,my,line_width*.5, global.colour_pick, global.colour_pick, 0);
    }
    surface_reset_target();
    //marker
    surface_set_target(me_overlaySurf);
    draw_set_alpha(0.4);
    draw_circle(mx,my,line_width*.5,1);
    draw_set_alpha(1);
    surface_reset_target();
    break;
case ("eraser"): //eraser
    surface_set_target(me_surf);
    if(mouse_check_button(mb_left))
    {
        draw_set_blend_mode(bm_subtract);
        //draw_line_width_colour(mxprev,myprev,mx,my,line_width,c_white,c_white);
        draw_circle_colour(mx,my,line_width*.5, c_white,c_white, 0);
        draw_set_blend_mode(bm_normal);
    }
    surface_reset_target();
    //marker
    surface_set_target(me_overlaySurf);
    draw_set_alpha(0.4);
    draw_circle(mx,my,line_width*.5,1);
    draw_set_alpha(1);
    surface_reset_target();
    break;
case "line":
    if(device_mouse_check_button_pressed(0,mb_left)){
        mxFrom = mx;
        myFrom = my;
    }else if(device_mouse_check_button(0,mb_left)){
        surface_set_target(me_overlaySurf);
        draw_line_width_colour(mxFrom,myFrom,mx,my,line_width,global.colour_pick,global.colour_pick);
        surface_reset_target();
    }else if(device_mouse_check_button_released(0,mb_left)){
        surface_set_target(me_surf);
        draw_line_width_colour(mxFrom,myFrom,mx,my,line_width,global.colour_pick,global.colour_pick);
        surface_reset_target();
    }
    break;
case "rectangle":
    if(device_mouse_check_button_pressed(0,mb_left)){
        mxFrom = mx;
        myFrom = my;
    }else if(device_mouse_check_button(0,mb_left)){
        surface_set_target(me_overlaySurf);
        draw_rectangle_colour(mxFrom,myFrom,mx,my,global.colour_pick,global.colour_pick,global.colour_pick,global.colour_pick,0);
        surface_reset_target();
    }else if(device_mouse_check_button_released(0,mb_left)){
        surface_set_target(me_surf);
        draw_rectangle_colour(mxFrom,myFrom,mx,my,global.colour_pick,global.colour_pick,global.colour_pick,global.colour_pick,0);
        surface_reset_target();
    }
    break;
case "circle":
    if(device_mouse_check_button_pressed(0,mb_left)){
        mxFrom = mx;
        myFrom = my;
    }else if(device_mouse_check_button(0,mb_left)){
        surface_set_target(me_overlaySurf);
        draw_ellipse_colour(mxFrom,myFrom,mx,my,global.colour_pick,global.colour_pick,0);
        surface_reset_target();
    }else if(device_mouse_check_button_released(0,mb_left)){
        surface_set_target(me_surf);
        draw_ellipse_colour(mxFrom,myFrom,mx,my,global.colour_pick,global.colour_pick,0);
        surface_reset_target();
    }
    break;
case "clear":
    var q = show_question("פעולה זו תמחק את כל מה שציירת#להמשיך?");
    if(q){
        surface_set_target(me_surf);
        draw_clear_alpha(global.colour_pick,1);
        surface_reset_target();
    }
    tool_current = "pen";
    break;
case "width":
    line_width = device_mouse_x_to_gui(0)-window_tools.x;
    show_debug_message(line_width);
    tool_current = tool_previous;
    break;
case "send":
    qSend = show_question_async("לשלוח את המפה?#לא יתאפשרו שינויים נוספים");
    tool_current = "pen";
    break;
case "undo":
    buffer_set_surface(me_buffBack,me_surf,0,0,0);
    tool_current = tool_previous;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(me_surf);
surface_free(me_colourSurf);
surface_free(me_overlaySurf);
surface_free(me_toolsSurf);
ds_grid_destroy(tool);
buffer_delete(me_buffBack);

with(oMapEditor_window_colour) instance_destroy();
with(oMapEditor_window_tools) instance_destroy();
with(oMapEditor_button_send) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(me_surf)) me_surf = surface_create(room_width,room_height);
if(!surface_exists(me_overlaySurf)) me_overlaySurf = surface_create(room_width,room_height);

draw_set_colour(0);
draw_rectangle(0,0,surface_get_width(me_surf)+4,surface_get_height(me_surf)+4,0);
draw_surface(me_surf,0,0);
draw_surface(me_overlaySurf,0,0);

//TEST_col = draw_getpixel(mouse_x,mouse_y);
//draw_circle_colour(mouse_x+64,mouse_y+64,16,TEST_col,TEST_col,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var q = show_question("לצאת?#השינויים לא ישמרו!");

if(q) room_goto(rLoadMap);*/

buffer_seek(wbuff,0,0);
buffer_write(wbuff,buffer_u8,Sock.MAPEDITSTOP);
network_send_packet(server,wbuff,buffer_tell(wbuff));

room_goto(rLoadMap);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
