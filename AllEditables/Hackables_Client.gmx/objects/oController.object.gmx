<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///APPDATA
if(os_type==os_windows)
{
    if((os_version div 65536) + (os_version mod 65536)*0.1 &gt;= 6.1)
    {
        APPDATA = environment_get_variable("LOCALAPPDATA")+"\"+game_project_name;
    }else{
        APPDATA = environment_get_variable("APPDATA")+"\"+game_project_name;
    }
}else{
    APPDATA = working_directory;
    show_message("This program can only run on windows machine (for now!)");
    //game_end();
    //exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sock_init()
sock_init();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init TCP connection
//global.ip = IP
globalvar server,wbuff;
server = network_create_socket(network_socket_tcp);

con = network_connect(server,global.ip,PORT);
if(con&lt;0)
{
    ///Error
    show_message("Connection to the server failed#Please restart the game and try again");
    game_end();
}
else
{
    wbuff = buffer_create(16,buffer_u8,1);
    //alarm[0] = 60; //ping
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Waiting reply
global.waitReply = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>chat_init</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Updater
enum Sprites{
    file,
    index,
    hash
}
//global.spr[i,Sprites.index]
global.sprChar[0,Sprites.file] = -1;
global.sprChar[0,Sprites.index] = -1;
global.sprChar[0,Sprites.hash] = -1;
global.sprMap[0,Sprites.file] = -1;
global.sprMap[0,Sprites.index] = -1;
global.sprMap[0,Sprites.hash] = -1;

//check directories
if(!directory_exists(working_directory+"\Characters")) directory_create(working_directory+"\Characters");
if(!directory_exists(working_directory+"\Maps")) directory_create(working_directory+"\Maps");

global.spr = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map vars
global.map_sprite = -1;
map_x = 64;
map_y = 63;

global.player_x = 100+random(200);
global.player_y = 100+random(200);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc globals
enum Mode{
    TRAVEL,
    GAME,
    CREATIVE
}
global.mode = Mode.TRAVEL;

//ping
alarm[0] = 30;
ping_time = current_time;
ping = -1;
connection_timeout = room_speed*13;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>friends_init</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping

if(!connection_timeout){
    show_message("השרת אינו מגיב");
    game_end();
}

buffer_seek(wbuff,buffer_seek_start,0);
buffer_write(wbuff,buffer_u8,Sock.PING);
network_send_packet(server,wbuff,buffer_tell(wbuff));
ping_time = current_time;
alarm[0] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timeout
connection_timeout--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(async_load[? "port"] != PORT) exit;

var tbuff = async_load[? "buffer"];
var tbuff_size = async_load[? "size"];
var tsock = async_load[? "id"];

if(tsock != server) {show_message("Error!#Bad connection#Game will now close");game_end();};

var cmd = buffer_read(tbuff,buffer_u8);
switch(cmd)
{
case Sock.PING:
    connection_timeout = room_speed*15;
    ping = (current_time-ping_time)*.5;
    break;
case Sock.LOGIN:
    global.waitReply = 0;
    var k = buffer_read(tbuff,buffer_u8);
    if(k==1)
    {
        var s = buffer_read(tbuff,buffer_u16);
        _map = buffer_read(tbuff,buffer_string);
        _mask = buffer_read(tbuff,buffer_string);
        
        global.spr = s;//global.sprChar[s,Sprites.index];
        var f  = global.sprChar[s,Sprites.file];
        //show_message(string(global.spr)+"#"+string(f));
        if(!file_exists(f)) updater_requestFile(f); //OR THE FILE IS OUTDATED!!!
        global.map = _map;
        global.map_mask = _mask;
        room_goto(rLoadMap);
    }
    else if(k==0) show_message_async("שם המשתמש או הסיסמא אינם נכונים")
    else if(k==2) show_message_async("קוד הדמות אינו נכון או שהדמות אינה קיימת");
    break;
case Sock.REGISTER:
    global.waitReply = 0;
    if(buffer_read(tbuff,buffer_bool)) show_message_async("ההרשמה הסתיימה בהצלחה");
    else show_message_async("שם המשתמש אינו זמין");
    break;
case Sock.JOIN:
    var _sock = buffer_read(tbuff,buffer_u8);
    var _name = buffer_read(tbuff,buffer_string);
    var _col = buffer_read(tbuff,buffer_s32);
    var _spr = buffer_read(tbuff,buffer_u16);
    var _xpos = buffer_read(tbuff,buffer_s16);
    var _ypos = buffer_read(tbuff,buffer_s16);
    global.mySock = _sock;
    
    if(_xpos&lt;20) _xpos = room_width-20;
    if(_xpos&gt;room_width-20) _xpos = 20;
    if(_ypos&lt;20) _ypos = room_height-20;
    if(_ypos&gt;room_height-20) _ypos = 20;
    
    with(instance_create(_xpos,_ypos,oPlayer))
    {
        sock = _sock;
        name = _name;
        spr = _spr;
        global.spr = _spr;
    }
    break;
case Sock.MOVE:
    var _plist = ds_list_create();
    with(oOther) ds_list_add(_plist, id);
    var n = buffer_read(tbuff,buffer_u8);
    repeat(n)
    {   //read buffer data
        var _sock = buffer_read(tbuff,buffer_u8);
        var _name = buffer_read(tbuff,buffer_string);
        var _col = buffer_read(tbuff,buffer_s16);
        var _xpos = buffer_read(tbuff,buffer_s16);
        var _ypos = buffer_read(tbuff,buffer_s16);
        var _bdir = buffer_read(tbuff,buffer_s16);
        var _spr = buffer_read(tbuff,buffer_u16);
        
        if(instance_exists(oPlayer) &amp;&amp; _sock==oPlayer.sock)
        {
            if(oPlayer.name!=_name){
                buffer_seek(wbuff,0,0);
                buffer_write(wbuff,buffer_u8,Sock.WARNING);
                network_send_packet(server,wbuff,buffer_tell(wbuff));
                show_message("Username missmatch#You have been kicked");
                game_end();
            }
            continue; //if this is the players sock, skip this info
        }else{
            with(oOther) if(sock==_sock) ds_list_delete(_plist, ds_list_find_index(_plist, self.id));
            
            ///other players data
            var a=0; //0=oOther was not found 1=found
            with(oOther) if(_sock==sock)
            {
                name = _name;
                if(spr!=_spr){ //if oOther changed his sprite, wait for the new one
                    spr = _spr;
                    sprite_index = sPlayer;
                } //move oOther
                xto = _xpos;
                yto = _ypos;
                if(_bdir!=-1) with(instance_create(x,y,oSnowball)){
                    father = other.id;
                    direction = _bdir;
                    speed = 8;
                }
                a=1;
                break;
            }
            if(a==0)
            { //oOther wasn't found, create it
                with(instance_create(_xpos,_ypos,oOther))
                {
                    sock = _sock;
                    name = _name;
                    spr = _spr;
                    sprite_index = sPlayer; //wait for sprite to download
                    var f = global.sprChar[_spr,Sprites.file];
                    /*var h = global.sprChar[_spr,Sprites.hash];
                    var fileH = sha1_file(string(APPDATA)+string(f));
                    if(!file_exists(f) || h!=fileH) updater_requestFile(f);*/
                    if(!file_exists(f)) updater_requestFile(f);
                }
            }
        }
    }
    //destroy all non existing oOthers
    while(ds_list_size(_plist)&gt;0) {
        with(_plist[| 0]) instance_destroy();
        ds_list_delete(_plist, 0);
    }
    ds_list_destroy(_plist);
    break;
case Sock.CHANGEMAP:
    var _x,_y,_map,_mask;
    _x = buffer_read(tbuff,buffer_u8);
    _y = buffer_read(tbuff,buffer_u8);
    _map = buffer_read(tbuff,buffer_string);
    _mask = buffer_read(tbuff,buffer_string);
    if(_map=="editable"){
        global.map_x_edit = _x;
        global.map_y_edit = _y;
        room_goto(rEditMap);
    }else{
        global.map = _map;
        global.map_mask = _mask;
        map_x = _x;
        map_y = _y;
        waitForServer = false;
        room_goto(rLoadMap);
    }
    break;
case Sock.MESSAGE:
    var _sock = buffer_read(tbuff,buffer_u32);
    var _msg = buffer_read(tbuff,buffer_string);
    with(oOther) if(sock==_sock) bchat_text = _msg;
    break;
case Sock.UPDATEINFO:
    var e,f,fhash,flock,
        n = buffer_read(tbuff, buffer_u16);
    for(var i=0; i&lt;n; i++){
        f = buffer_read(tbuff,buffer_string);
        fhash = buffer_read(tbuff, buffer_string);
        flock = buffer_read(tbuff,buffer_bool); //useless for now, checks if char is locked with pass
        global.sprChar[i,Sprites.file] = f;
        ////Causes a crash: "i" is negative/too high?
        //if(sprite_exists(global.sprChar[i,Sprites.index])) sprite_delete(global.sprChar[i,Sprites.index]);
        global.sprChar[i,Sprites.hash] = fhash;
        global.sprChar[i,Sprites.index] = -1;
    }
    /*if(global.spr&gt;=0){
        i=sprChar_find(global.sprChar[global.spr,Sprites.file]);
    }
    with(oOther){
        if(file_exists(global.sprChar[spr,Sprites.file])){
            spr = sprChar_find(global.sprChar[spr,Sprites.file]);
        }
    }
    if(global.spr&gt;=0) global.spr = sprChar_find(global.sprChar[global.spr,Sprites.index]);
    with(oPlayer) sprite_index = oPlayer;
    */
    n = buffer_read(tbuff,buffer_u16);
    for(var i=0; i&lt;n; i++){
        f = buffer_read(tbuff,buffer_string);
        fhash = buffer_read(tbuff, buffer_string);
        global.sprMap[i,Sprites.file] = f;
        global.sprMap[i,Sprites.hash] = fhash;
    }
    upstate = -1;
    if(room==rUpdate) room_goto(rMenu);
    break;
case Sock.UPDATEFILE:
    var fname = buffer_read(tbuff,buffer_string);
    var w=buffer_read(tbuff,buffer_u16);
    var h=buffer_read(tbuff,buffer_u16);
    var buf = buffer_create(w*h*4,buffer_fixed,4);
    buffer_copy(tbuff,buffer_tell(tbuff),buffer_get_size(tbuff),buf,0);
    
    var _surf = surface_create(w,h);
    buffer_set_surface(buf,_surf,0,0,0);
    surface_save(_surf,APPDATA+"\"+string(fname));
    surface_free(_surf);
    buffer_delete(buf);
    if(string_pos("characters\",string_lower(fname))){
        var n = sprChar_find(fname);
        if(sprite_exists(global.sprChar[n, Sprites.index])){
            sprite_delete(global.sprChar[n, Sprites.index]);
            global.sprChar[n, Sprites.index] = -1;
            //with(oPlayer) if(global.spr==n) sprite_index = global.sprChar[n,Sprites.index];
        }
        /*for(var i=0; i&lt;array_height_2d(global.sprChar); i++){
            if( global.sprChar[i,Sprites.file] == fname ){
                global.sprChar[i,Sprites.index] = -1;//sprite_add(fname,1,0,0,32,32);
                break;
            }
        }*/
    }
    if(room == rUpdate) room_goto(rMenu)
    else if(room == rLoadMap) room_restart();
    break;
case Sock.BATTLE_REQUEST:
    if(room!=rGame) break; //make sure we are in the correct room
    var tsock_from = buffer_read(tbuff,buffer_u32);
    
    switch(global.inBattle)
    {
    case 0: //this is a request
        var nm = "";
        with(oOther) if(sock==tsock_from) {nm = string(name);break;};
        if(nm!="")
        {
            buffer_seek(wbuff,0,0);
            buffer_write(wbuff,buffer_u8,Sock.BATTLE_REQUEST);
            buffer_write(wbuff,buffer_u32,tsock_from);
            if(show_question("Player ["+nm+"] has invited you for a battle#Accept invitation?"))
            {//accept
                buffer_write(wbuff,buffer_bool,1);
                global.inBattle = 2;//now wait for the battle info from the server
            }else{//decline
                buffer_write(wbuff,buffer_bool,0);
            }
            network_send_packet(server,wbuff,buffer_tell(wbuff));
        }
        break;
    case 1: //this is a response
        waitForServer = false;
        var a = buffer_read(tbuff,buffer_bool);
        if(a){//accepted
            show_message_async("Battle request accepted");
            global.inBattle = 2;
            tsock_from = buffer_read(wbuff,buffer_u32); //the real opponent tsock as written again in the server
            battle_readInfo(global.mySock); //mine
            battle_readInfo(tsock_from); //enemy
            room_goto(rBattle);
        }else{//declined
            show_message_async("Battle request declined");
            global.inBattle = 0;
        }
        break;
    case 2: //im in battle; this is a battle info
        var _response = buffer_read(tbuff,buffer_bool);
        tsock_from = buffer_read(wbuff,buffer_u32); //the real opponent tsock as written again in the server
        battle_readInfo(tsock_from); //enemy
        battle_readInfo(global.mySock); //mine
        room_goto(rBattle);
        break;
    }
    break;
case Sock.UPLOADCHAR:
    var i = buffer_read(tbuff,buffer_bool);
    if(i) show_message_async("הדמות נקלטה בהצלחה")
    else show_message_async("הדמות לא נקלטה#קוד הדמות אינו חוקי");
    break;
case Sock.UPLOAD_MAP:
    var i = buffer_read(tbuff,buffer_bool);
    if(i) show_message_async("המפה נקלטה בהצלחה")
    else{
        with(oMapEditor_controller) surface_save(me_surf,APPDATA+"autoSave_map.png");//buffer_set_surface(me_buffBack,me_surf,0,0,0);
        show_message_async("המפה לא נקלטה#נסו מיקום אחר");
    }
    break;
case Sock.FRIEND_REQUEST:
    var _sock = buffer_read(tbuff,buffer_u32);
    if(instance_exists(Clients[_sock])){
        /////CHECK IF WE ARE WAITING FOR APPROVAL FROM THIS PLAYER//////
        //if(waitingForFriendAproval) addFriend(tsock)
        if(friends_waitingForApproval&gt;=0)
        {
            friends_add(_sock);
            show_message_async(string(Clients[_sock].name)+" אישר את בקשת החברות");
        }
        else
        {
            var q = show_question(string(Clients[_sock].name)+" הציע לך חברות#לאשר?");
            if(q){ //send approve
                buffer_seek(wbuff,buffer_u8,Sock.FRIEND_REQUEST);
                buffer_write(wbuff,buffer_u32,_sock);
                network_send_packet(server,wbuff,buffer_tell(wbuff));
            }
        }
    }
    break;
default:
    show_message("Unknown packet received#Possible hacking attempt or network failure#Game will now quit");
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room)
{
case rGame:
    buffer_seek(wbuff,buffer_seek_start,0);
    buffer_write(wbuff,buffer_u8,Sock.JOIN);
    buffer_write(wbuff,buffer_s16,global.player_x);
    buffer_write(wbuff,buffer_s16,global.player_y);
    network_send_packet(server,wbuff,buffer_tell(wbuff));
    break;
case rUpdate:
    upstate = 0;
    buffer_seek(wbuff,0,0);
    buffer_write(wbuff,buffer_u8,Sock.UPDATEINFO);
    network_send_packet(server,wbuff,buffer_tell(wbuff));
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room==rGame &amp;&amp; chat_type)
{
    draw_set_alpha(0.7);
    draw_rectangle(0,view_hview-26,view_wview,view_hview,0);
    draw_set_alpha(1);
    draw_set_color(c_white);
    var _width = string_width(keyboard_string);
    draw_text(view_hview-26,view_wview,keyboard_string);
    draw_line(_width,view_hview-22,_width,view_hview-22);
    draw_set_color(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
if(room==rUpdate)
{
    draw_set_color(c_white);
    draw_set_halign(1); draw_set_valign(1); draw_set_font(fnt_ariel);
    
    switch(upstate)
    {
    case 0: //waiting for the server
        draw_text(room_width/2,room_height/2,"...םינוכדע קדוב");
        break;
    case 1: //downloading
        draw_text(room_width/2,room_height/2,'...םינוכדע דירומ#'+string(global.fileUpdateList[| 0]));
        draw_rectangle(0,room_height/2+30,(global.fileUpdateListMax-ds_list_size(global.fileUpdateList))*(1/global.fileUpdateListMax)*room_width, room_height/2+60, 0);
        break;
    }
    
    draw_set_halign(0); draw_set_valign(0);
    draw_set_color(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load map
if(room==rLoadMap)
{
    draw_set_color(c_white);
    draw_set_halign(1); draw_set_valign(1); draw_set_font(fnt_ariel);
    
        draw_text(room_width/2,room_height/2,"Loading Map...#הפמ ןעוט...");
    
    draw_set_halign(0); draw_set_valign(0);
    draw_set_color(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game GUI
if(room==rGame)
{
    draw_set_color(c_white);
    draw_set_alpha(0.8);
    draw_text(10,10,"["+string(map_x)+","+string(map_y)+"]#Players: "+string(instance_number(oOther)+1)+"#Ping: "+string(ping));
    draw_set_color(0);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Battle GUI
if(room==rBattle)
{

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room==rGame)
{
    if(chat_type)
    {
        keyboard_string = string_reverse(keyboard_string);
        buffer_seek(wbuff,0,0);
        buffer_write(wbuff,buffer_u8,Sock.MESSAGE);
        buffer_write(wbuff,buffer_string,keyboard_string);
        network_send_packet(server,wbuff,buffer_tell(wbuff));
        with(oPlayer) bchat_text = keyboard_string;
    }
    chat_type = !chat_type;
    keyboard_string = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room==rBattle) room_goto(rGame);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
