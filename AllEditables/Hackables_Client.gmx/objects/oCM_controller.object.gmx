<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Maker init
global.colour_pick = c_black;
scwPrev = 0;
schPrev = 0;

cm_Surf = surface_create(64,64);
if(file_exists(working_directory+"autoSave.png")){
    var s = sprite_add(working_directory+"autoSave.png",1,0,0,0,0);
    surface_set_target(cm_Surf);
        draw_sprite(s,0,0,0);
    surface_reset_target();
    sprite_delete(s);
}
cm_colourSurf = surface_create(256,256);
surface_set_target(cm_colourSurf);
draw_clear_alpha(0,1);
draw_rectangle_colour(0,0,256,256,c_white,c_white,c_black,c_black,0);
draw_background_stretched(tex_colour,0,0,256,256);
surface_reset_target();

window_colour = window_create(oCM_window_colour,room_width-320,0,256,256);
window_colour.window_draw = 0;

window = instance_create(192,128,oCM_window);
window.window_draw = 0;
with(window){
    button[0] = instance_create(4,0,oCM_button_clear);
    button[0].visible = 0;
    button[1] = other.window_colour;
    button[2] = instance_create(4,64,oCM_button_send);
    button[2].visible = 0;
}

alarm[0] = 3*room_speed; //auto save
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Auto Save
if(window.window_draw)
    surface_save(cm_Surf,working_directory+"autoSave.png");
alarm[0] = 5*room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Color picker
mx = device_mouse_x_to_gui(0);
my = device_mouse_y_to_gui(0);

if(window_colour.visible &amp;&amp; global.mode==Mode.CREATIVE)
{
    //Colour picker
    var ww = window_colour.w-window_colour.x,
        wh = window_colour.h-window_colour.y;
    
    if( point_in_rectangle(mx,my,window_colour.x,window_colour.y+window_colour.window_top,window_colour.x+window_colour.w,window_colour.y+window_colour.h+window_colour.window_top) )
    {
        if(mouse_check_button_pressed(mb_left))
        {
            scw = floor((mx-window_colour.x)*256/window_colour.w);
            sch = floor((my-window_colour.y-window_colour.window_top)*256/window_colour.h);
            global.colour_pick = surface_getpixel(cm_colourSurf,scw,sch);
        }
    }
    else
    {
        //Draw to surface
        ww = window.w-window.x;
        wh = window.h-window.y;
        if( point_in_rectangle(mx,my,window.x,window.y+window.window_top,window.x+window.w,window.y+window.h+window.window_top) )
        {
            scw = floor((mx-window.x)*64/window.w);
            sch = floor((my-window.y-window.window_top)*64/window.h);
            if(mouse_check_button_pressed(mb_left)){
                scwPrev = scw;
                schPrev = scw;
            }
            surface_set_target(cm_Surf);
            if(mouse_check_button(mb_left)){
                draw_line_colour(scwPrev,schPrev,scw,sch,global.colour_pick,global.colour_pick);
            }
            if(mouse_check_button(mb_right)){
                draw_set_blend_mode(bm_subtract);
                draw_line_colour(scwPrev,schPrev,scw,sch,c_white,c_white);
                draw_set_blend_mode(0);
            }
            scwPrev = scw;
            schPrev = sch;
            surface_reset_target();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw to surface
/*if(window.visible &amp;&amp; global.mode==Mode.CREATIVE)
{
    var mx = device_mouse_x_to_gui(0),
        my = device_mouse_y_to_gui(0),
        ww = window.w-window.x,
        wh = window.h-window.y;
    
    if( point_in_rectangle(mx,my,window.x,window.y+window.window_top,window.x+window.w,window.y+window.h+window.window_top) )
    {
        surface_set_target(cm_Surf);
        if(mouse_check_button(mb_left))
        {
            scw = floor((mx-window.x)*64/window.w);
            sch = floor((my-window.y-window.window_top)*64/window.h);
            draw_point_colour(scw, sch, global.colour_pick);
        }
        if(mouse_check_button(mb_right))
        {
            draw_set_blend_mode(bm_subtract);
            scw = floor((mx-window.x)*64/window.w);
            sch = floor((my-window.y-window.window_top)*64/window.h);
            draw_point_colour(scw, sch, c_white);
            draw_set_blend_mode(0);
        }
        surface_reset_target();
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(cm_Surf)) surface_free(cm_Surf);
if(surface_exists(cm_colourSurf)) surface_free(cm_colourSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(oCM_window) window_show(!window_draw);
window_colour.window_draw = oCM_window.window_draw;
global.mode = oCM_window.window_draw * Mode.CREATIVE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
